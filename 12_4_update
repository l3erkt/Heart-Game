import random
import deck
import copy

""" 
Using the deck module I am creating a variable called deck that has all 
52 cards in them and shuffling them before I start my player class.
"""
deck = deck.deck
random.shuffle(deck)

class Player:
    
    def __init__(self, name):
        """
        Here I am initializing both name and hand to create 
        an instance of a player.
        """
        self.name = name
        self.hand = {self.name: []}
        self.scoring_cards = []
        self.score = 0
        
    
    def deal(self, cards_per_player=13):
        """
        After creating my attributes I am iterating through the first 13 
        cards by default in my deck variable and popping them and appending them 
        two my player hand.
        """
        for _ in range(cards_per_player):
            card = deck.pop()
            self.hand[self.name].append(card)

        
    
    #RETURN
    """
    Player <obj>   --->   {name : [[card], [card], [card]]}
    You can obtain the name of the obj by: <obj>.name
    or obtain the hand by <obj>.hand
    """

def table():
    """
    Here I am asking the users for each players name.
    Then I am adding the name to my Players class and creating an instance of
    that player.
    Then I deal them cards.
    And finally update my table variable that was initally an empty dictionary
    to the players hand
    
    """
    table = dict() 
    for i in range(1, 5):
        name = input(f'Player{i} name: ') 
        p = Player(name)
        p.deal()
        table.update(p.hand)        
        
    return table

    """
    table = {
            bk : [[card], [card], [card]...],
            kyle : [[card], [card], [card]...],
            melat : [[card], [card], [card]...],
            hamza : [[card], [card], [card]...]
        }
    """
def find_first(table):
    # Finds the first player to go in a trick
    fl = False
    for name, hand in table.items():
        for card in hand:
            if str(card[1]) == "2" and card[0] == "club":
                print(name, "is the first player")
                found = name
                fl = True
    return found



class Game:

    def __init__(self,my_game):
        self.my_game = my_game
        # This is the actual trick where users play their cards
        self.trick = {}
        game2 = copy.deepcopy(MY_GAME)
        
        for key in game2:
            game2[key] = ""
        
    def __str__(self):
        ret = ""
        for name, hand in self.my_game.items():
            ret += name + "'s cards" ": |"
            for card in hand:
                ret += (str(card[1]) + " of " + card[0] + "| ")

            ret += ("\n")
            
        return ret
    
    def gameplay(self):
        unordered = list(self.my_game.keys())
        print(f"The order is: ", end = "")
        first = unordered.index(FIRST) 
        rem = unordered[first:]
        unordered = unordered[:first]
        com = rem + unordered
        for i in range(len(com)):
            self.trick[com[i]] = ""
        print(com)
        print("\n")
        finished = False
        
        while finished == False:
            self.trick = {}
            leading_suit = ""
            for i in range(3):
                if i > 0:
                    print(f"The leading suit is a {leading_suit}, you must play a {leading_suit}")
                print(str(self))
                print(self.trick, "passed trick")
                suit_choice = input(f"{com[i]}, What suit would you like to play? ")
                num_choice = input("What number of that suit would you like to play? ")
                if i == 0:
                    leading_suit = suit_choice
                if num_choice.isdigit():
                    num_choice = int(num_choice)
                paired = [suit_choice,num_choice]
                self.trick[com[i]] = paired        
                self.my_game[com[i]].remove(paired)
                print(self.trick, "Current trick")
        
            trick_copy = copy.deepcopy(self.trick)
            print(trick_copy, " this is a copy")
            highest = ["", 0]
            winner_name = ""
            for key,value in trick_copy.items():
                highest = ["", 0]

            def convert_cards(card):
                if  card == "A":
                    val_converted = 14
                elif  card == "K":
                    val_converted = 13
                elif  card == "Q":
                    val_converted = 12
                elif  card == "J":
                    val_converted = 11
                else:
                    val_converted = int(card)
                
                return val_converted
                    
            for key,value in trick_copy.items():
                val_converted = convert_cards(value[1])
                high_convert = convert_cards(highest[1])
                

                if high_convert < val_converted:
                    highest = value
                    winner_name = key
            print(f"{winner_name} wins as they placed a(n) {highest[0]} of {highest[1]}")
            

    
MY_GAME = table()
FIRST = find_first(MY_GAME)

game = Game(MY_GAME)
game.gameplay()
